{"version":3,"sources":["img/logo.svg","components/App/App.js","components/SignUpForm/SignUpForm.js","components/Auth/Auth.js","serviceWorker.js","index.js","setupFirebase.js"],"names":["module","exports","lastBaloonTime","Date","now","baloonDTime","App","state","user","baloons","handleClick","event","firebase","auth","signOut","createBaloon","baloon","document","createElement","className","classList","add","onclick","remove","speed","Math","ceil","random","style","left","floor","push","getElementById","appendChild","update","forEach","bottom","parseFloat","window","getComputedStyle","requestAnimationFrame","onAuthStateChanged","database","ref","uid","once","then","snapshot","fetchedUser","val","setState","this","id","name","Button","onClick","Component","withRouter","SignUpForm","email","password","error","handleSubmit","preventDefault","createUserWithEmailAndPassword","data","set","catch","handleChange","target","value","onSubmit","message","Input","placeholder","onChange","required","Auth","unsubscribe","src","logo","alt","props","children","Boolean","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eaca6334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f55e5671.svg\";","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { Button } from 'semantic-ui-react'\nimport \"semantic-ui-css/semantic.min.css\";\nimport firebase from 'firebase'\nimport './App.css';\n\nconst beginAt = Date.now()\nvar lastBaloonTime = beginAt;\nconst baloonDTime = 800 \n\nclass App extends Component {\nstate = {\n  user: null,\n  baloons: []\n};\n\n\ncomponentDidMount() {\n  firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      firebase\n        .database()\n        .ref(\"users/\" + user.uid)\n        .once(\"value\")\n        .then(snapshot => {\n          let fetchedUser = { uid: user.uid, ...(snapshot.val() || {}) };\n          this.setState({ user: fetchedUser });\n        });\n    }\n  });\n  this.update();\n}\n\nhandleClick = event => {\n  firebase.auth().signOut()\n}\n\ncreateBaloon = () => {\n\n    \n  const baloon = document.createElement('div', {className: 'baloon'})\n  baloon.classList.add('baloon')\n  baloon.onclick = () => {baloon.remove()}\n  baloon.speed = Math.ceil(Math.random() * 3)\n  baloon.style.left = Math.floor(Math.random() * 100) - 10 + 'vw'; \n  this.state.baloons.push(baloon);\n  if (document.getElementById('App')) {\n    document.getElementById(\"App\").appendChild(baloon)\n  }\n  \n  \n\n}\n\nupdate = () => {\n  var now = Date.now()\n\n  if (now - lastBaloonTime > baloonDTime) {\n    this.createBaloon()\n  lastBaloonTime = now\n}\n\nthis.state.baloons.forEach(function (baloon) {\n  var bottom = parseFloat(window.getComputedStyle(baloon).bottom);\n  // var left = parseFloat(window.getComputedStyle(baloon).left);\n\n  bottom += baloon.speed;\n      if (bottom >= 570) {\n        baloon.remove()\n      }\n      \n\n      baloon.style.bottom = bottom + 'px';\n})\n\nrequestAnimationFrame(this.update);\n}\n \n\nrender() {\n   return (\n    <div id=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Cześć {this.state.user ? this.state.user.name : '' }!\n        </h1>\n        <h1>\n          Zanim Duda zadzwoni możesz sobie poklikać w balony :v\n        </h1>\n      </header>\n      <Button onClick={this.handleClick}>Uciekam</Button>\n    </div>\n  );\n }\n}\n\nexport default withRouter(App);\n","import React, { Component } from 'react';\nimport firebase from 'firebase'\nimport { Input, Button } from 'semantic-ui-react'\nimport \"semantic-ui-css/semantic.min.css\";\nimport './SignUpForm.css'\n\nclass SignUpForm extends Component {\n    state = {\n        email: \"\",\n        password: \"\",\n        name: \"\",\n        error: null\n      };\n    \n      handleSubmit = event => { \n        event.preventDefault();\n        firebase\n          .auth()\n          .createUserWithEmailAndPassword(this.state.email, this.state.password)\n          .then(data => {\n            firebase.database().ref(\"users/\" + data.user.uid).set({\n              name: this.state.name\n            });\n          }).catch(error => this.setState({ error })) \n    \n      };\n    \n      handleChange = event => {\n        this.setState({\n          [event.target.name]: event.target.value\n        });\n      };\n\n  render() {\n    return (\n      <div className=\"SignUp\">\n        <form onSubmit={this.handleSubmit} className=\"SignUpForm\">\n          {this.state.error && <p>{this.state.error.message}</p>}\n          <Input\n            className='Text'\n            placeholder=\"Enter email\"\n            name=\"email\"\n            value={this.state.email}\n            onChange={this.handleChange}\n            required={true}\n          />\n          <Input\n            className='Text'\n            placeholder=\"Enter password\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n            required={true}\n          />\n          <Input\n            className='Text'\n            placeholder=\"Enter name\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n          <Button>Sign up</Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignUpForm;\n","import React, { Component } from 'react';\nimport SignUpForm from '../SignUpForm/SignUpForm'\nimport logo from '../../img/logo.svg'\nimport firebase from 'firebase'\nimport './Auth.css'\n\nclass Auth extends Component {\n    state = {\n        user: {}\n      };\n    \n      componentDidMount() {\n        this.unsubscribe = firebase\n          .auth()\n          .onAuthStateChanged(user => this.setState({ user }));\n      }\n    \n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n  render() {\n    return this.state.user === null ? (\n      <div id=\"App2\">\n         <img src={logo} alt=\"logo\" />\n        <SignUpForm/>\n        </div>\n    ) : (\n        this.props.children\n    )\n  }\n}\n\nexport default Auth;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport Auth from \"./components/Auth/Auth\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport firebase from \"firebase\";\nimport setupFirebase from \"./setupFirebase\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nfirebase.initializeApp(setupFirebase);\n\nReactDOM.render(\n  <Auth>\n    <Router>\n      <App />\n    </Router>\n  </Auth>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n    apiKey: \"AIzaSyDPFIaK2hCk01sMxrGjaiuizY7Wj8A-eBk\",\n    authDomain: \"agenctwo.firebaseapp.com\",\n    databaseURL: \"https://agenctwo.firebaseio.com\",\n    projectId: \"agenctwo\",\n    storageBucket: \"agenctwo.appspot.com\",\n    messagingSenderId: \"494327313526\",\n    appId: \"1:494327313526:web:88698ec97f6d8b0bc5db57\",\n    measurementId: \"G-6FB8J0V0W8\"\n}\n"],"sourceRoot":""}